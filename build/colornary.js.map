{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap bbe371ab8bde783faae8","webpack:///./src/utils/index.js","webpack:///./src/conversions/index.js","webpack:///./src/utils/parse-color.js","webpack:///./src/conversions/hsl.js","webpack:///./src/conversions/rgb.js","webpack:///./src/index.js","webpack:///./src/utils/equal-arrays.js","webpack:///./src/utils/convenience-to-hsla.js","webpack:///./src/conversions/hsla.js","webpack:///./src/conversions/rgba.js","webpack:///./src/manipulations/index.js","webpack:///./src/manipulations/luminance.js","webpack:///./src/manipulations/saturation.js","webpack:///./src/manipulations/opacity.js"],"names":["default","hsl","hsla","rgb","rgba","conversions","toHsl","$color","hslColor","colorObject","type","color","err","console","error","toHsla","hslaColor","toHex","hexColor","toRgb","rgbColor","toRgba","rgbaColor","toJSON","jsonColor","parseRgbString","rgbString","values","match","map","parseInt","n","length","Error","r","g","b","format","parseRgbaString","rgbaString","s","slice","alpha","parseFloat","a","parseHslString","hslString","degPattern","turnPattern","hue","RegExp","perc","test","replace","h","l","parseHslaString","hslaString","Number","parseHexString","hexString","hex","split","d","repeat","join","parseColorString","colorString","parseColorObject","keys","Object","c","toLowerCase","parseColor","parsedColor","red","green","blue","chroma","Math","abs","hueDiv","sec","round","adjColor","toString","max","min","luminance","saturation","num","darken","lighten","saturate","desaturate","opacify","transparentize","equalsArray","arr1","arr2","sort","i","convert","convenienceToHsla","parsed","subScript","toUpperCase","includes","toOriginalColorType","newColor","alterLuminance","factor","lum","adjLum","warn","alterSaturation","sat","adjSat","alterOpacity","adjAlpha"],"mappings":"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","file":"colornary.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"colornary\"] = factory();\n\telse\n\t\troot[\"colornary\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bbe371ab8bde783faae8","export { default as parseColor } from './parse-color';\nexport { default as equalArrays } from './equal-arrays';\nexport { default as convenienceToHsla } from './convenience-to-hsla';\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/index.js","import parseColor from '../utils/parse-color';\nimport * as hsl from './hsl';\nimport * as hsla from './hsla';\nimport * as rgb from './rgb';\nimport * as rgba from './rgba';\n\n\nconst conversions = {\n  hsl,\n  hsla,\n  rgb,\n  rgba,\n};\n\n\n/**\n * Converts color to Hsl\n * \n * @param {string|object} $color\n * @return {string} - Hsl string  \n */\nexport const toHsl = ($color) => {\n  let hslColor;\n  try {\n    const colorObject = parseColor($color);\n    const { type, color } = colorObject;\n    hslColor = conversions[type].toHsl(color);\n  } catch (err) {\n    console.error(err);\n  }\n  return hslColor;\n};\n\n\n/**\n * Converts color to Hsla\n * \n * @param {string|object} $color\n * @return {string} - Hsla string  \n */\nexport const toHsla = ($color) => {\n  let hslaColor;\n  try {\n    const colorObject = parseColor($color);\n    const { type, color } = colorObject;\n    hslaColor = conversions[type].toHsla(color);\n  } catch (err) {\n    console.error(err);\n  }\n  return hslaColor;\n};\n\n\n/**\n * Converts color to Hex\n * \n * @param {string|object} $color\n * @returns {string} - Hex string\n */\nexport const toHex = ($color) => {\n  let hexColor;\n  try {\n    const colorObject = parseColor($color);\n    const { type, color } = colorObject;\n    hexColor = conversions[type].toHex(color);\n  } catch (err) {\n    console.error(err);\n  }\n  return hexColor;\n};\n\n\n/**\n * Converts color to RGB\n * \n * @param {string|object} $color\n * @returns {string} - RGB CSS string\n */\nexport const toRgb = ($color) => {\n  let rgbColor;\n  try {\n    const colorObject = parseColor($color);\n    const { type, color } = colorObject;\n    rgbColor = conversions[type].toRgb(color);\n  } catch (err) {\n    console.error(err);\n  }\n  return rgbColor;\n};\n\n\n/**\n * Converts color to RGBA\n * \n * @param {string|object} $color\n * @returns {string} - RGBA CSS string\n */\nexport const toRgba = ($color) => {\n  let rgbaColor;\n  try {\n    const colorObject = parseColor($color);\n    const { type, color } = colorObject;\n    rgbaColor = conversions[type].toRgba(color);\n  } catch (err) {\n    console.error(err);\n  }\n  return rgbaColor;\n};\n\n\n/**\n * Converts color to JSON\n * \n * @param {string|object} $color\n * @returns {object} - Color JSON\n */\nexport const toJSON = (color) => {\n  let jsonColor;\n  try {\n    jsonColor = parseColor(color).color;\n  } catch (err) {\n    console.error(err);\n  }\n  return jsonColor;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/conversions/index.js","import { equalArrays } from './';\n\n\n/**\n * Parses RGB string\n * Assumes format `rgb([red], [green], [blue])`\n * \n * Deconstructs RGB CSS string: gets all three, 0-255 values\n * (red, green, blue). The values are then mapped to a color\n * object for manipulation/conversion.\n * @param {string} rgbString\n * @throws if missing rgb values\n * @returns {object} - parsed RGB color object\n */\nconst parseRgbString = (rgbString) => {\n  // deconstruct rgb\n  const values = rgbString.match(/(2[0-5]\\d|1\\d{2}|\\d{1,2})/g)\n    .map(n => parseInt(n, 10));\n  if (values.length !== 3) throw new Error('Invalid RGB String');\n  const color = { r: values[0], g: values[1], b: values[2] };\n  // return color object\n  return { color, format: 'string', type: 'rgb' };\n};\n\n\n/**\n * Parses RGBA string\n * Assumes format: `rgba([red], [green], [blue], [alpha])`\n * \n * Deconstructs RGBA CSS string: first getting all three, 0-255\n * values (red, green, blue), then the alpha channel. The values\n * are then mapped to a color object for manipulation/conversion.\n * @param {string} rgbaString\n * @throws if missing RGB / alpha values\n * @returns {object} - parsed RGB color object\n */\nconst parseRgbaString = (rgbaString) => {\n  // deconstruct rgba string\n  const values = rgbaString.match(/(2[0-5]\\d|1\\d{2}|\\d{1,2}),/g)\n    .map(s => parseInt(s.slice(0, -1), 10));\n  if (values.length !== 3) throw new Error('Invalid RGBA String');\n  const alpha = parseFloat(rgbaString.match(/(1(\\.0)?|0(\\.\\d+)?)\\)/)[0].slice(0, -1));\n  const color = { r: values[0], g: values[1], b: values[2], a: alpha };\n  // return color object\n  return { color, format: 'string', type: 'rgba' };\n};\n\n\n/**\n * Parses HSL string\n * Assumes format: `hsl([hue], [saturation], [luminance])`\n * \n * Deconstructs HSL CSS string: first getting the hue, then the\n * percentages (saturation and luminance). The values are then\n * mapped to a color object for manipulation/conversion.\n * @param {string} hslString\n * @throws if missing HSL values\n * @returns {object} - parsed HSL color object\n */\nconst parseHslString = (hslString) => {\n  // Deconstruct hsl string\n  const degPattern = '(360|3[0-5]\\\\d|[12]\\\\d{2}|[1-9]?\\\\d|\\\\d)(deg)?';\n  const turnPattern = '(1(\\\\.0+)?|0(\\\\.\\\\d+)?)';\n  let hue = hslString.match(new RegExp(`\\\\((${degPattern}|${turnPattern})`, 'g'));\n  const perc = hslString.match(/[\\s,](100|[1-9]?\\d)%/g).map(s => parseInt(s.slice(1, -1), 10) / 100);\n  if (perc.length !== 2 || hue.length !== 1) throw new Error('Invalid HSL String');\n  // Normalize hue\n  if (/deg/.test(hue)) hue = hue[0].slice(1).replace('deg', '');\n  else if (/turn/.test(hue)) hue = parseInt(hue[0].slice(1).replace('turn', ''), 10) * 360;\n  else hue = hue[0].slice(1);\n  hue = parseInt(hue, 10);\n  const color = { h: hue, s: perc[0], l: perc[1] };\n  // Return color object\n  return { color, format: 'string', type: 'hsl' };\n};\n\n\n/**\n * Parses HSLA string\n * Assumes format: `hsla([hue], [saturation], [luminance], [alpha])`\n * \n * Deconstructs HSLA CSS string: first getting the hue, then the\n * percentages (saturation and luminance), finally, the alpha\n * channel. The values are then mapped to a color object for\n * manipulation/conversion.\n * @param {string} hslaString\n * @throws if missing HSL / alpha values\n * @returns {object} - parsed HSLA color object\n */\nconst parseHslaString = (hslaString) => {\n  // Deconstruct hsl string\n  const degPattern = '(360|3[0-5]\\\\d|[12]\\\\d{2}|[1-9]?\\\\d|\\\\d)(deg)?';\n  const turnPattern = '(1(\\\\.0+)?|0(\\\\.\\\\d+)?)';\n  let hue = hslaString.match(new RegExp(`\\\\((${degPattern}|${turnPattern})`, 'g'));\n  const perc = hslaString.match(/[\\s,](100|[1-9]?\\d)%/g).map(s => parseInt(s.slice(1, -1), 10) / 100);\n  const alpha = Number(hslaString.match(/(,|\\s)(1(\\.\\d+)?|0(\\.\\d+)?)\\)/)[0].slice(1, -1));\n  if (perc.length !== 2 || hue.length !== 1) throw new Error('Invalid HSL String');\n  // Normalize hue\n  if (/deg/.test(hue)) hue = hue[0].slice(1).replace('deg', '');\n  else if (/turn/.test(hue)) hue = parseInt(hue[0].slice(1).replace('turn', ''), 10) * 360;\n  else hue = hue[0].slice(1);\n  hue = parseInt(hue, 10);\n  const color = { h: hue, s: perc[0], l: perc[1], a: alpha };\n  // Return color object\n  return { color, format: 'string', type: 'hsla' };\n};\n\n\n/**\n * Parses hex string\n * Assumes format: `#[red][green][blue]`\n * \n * Deconstructs hex CSS string: getting all hex values (red, \n * green, blue) and parsing them as integers. The values are then\n * mapped to a color object for manipulation/conversion. \n * @param {string} hexString\n * @returns {object} - parsed RGB(hex) color object\n */\nconst parseHexString = (hexString) => {\n  // deconstruct hex string\n  let hex = hexString.slice(1);\n  // normalize shorthand hex\n  hex = hex.length === 3 ? hex.split('').map(d => d.repeat(2)).join('') : hex;\n  const color = {\n    r: parseInt(hex.slice(0, 2), 16),\n    g: parseInt(hex.slice(2, 4), 16),\n    b: parseInt(hex.slice(4, 6), 16),\n  };\n  // return color object\n  return { color, format: 'string', type: 'rgb', hex: true };\n};\n\n\n/**\n * Parses color string\n * Assumes CSS compatability and hue values are in degrees\n * \n * Matches the given CSS string with a given prefix and calls\n * the corresponding parser, returning the parsed color object\n * @param {string} colorString\n * @throws if color type not matched\n * @returns {object} - parsed [deffered] color object\n */\nconst parseColorString = (colorString) => {\n  let color;\n  // determine type and defer to type parser\n  if (/^rgb\\s?\\(/.test(colorString)) color = parseRgbString(colorString);\n  else if (/^rgba\\s?\\(/.test(colorString)) color = parseRgbaString(colorString);\n  else if (/^hsl\\s?\\(/.test(colorString)) color = parseHslString(colorString);\n  else if (/^hsla\\s?\\(/.test(colorString)) color = parseHslaString(colorString);\n  else if (/^#[a-f0-9]{3,6}$/i.test(colorString)) color = parseHexString(colorString);\n  else throw new Error('Unsupported color type');\n  return color;\n};\n\n\n/**\n * Parses color object\n * Assumes CSS compatability\n * \n * Matches the given color objects keys with a given format. The\n * color is then encapsulated in a parsed color object for \n * manipulation/conversion.\n * @param {object} colorString\n * @throws if color keys not matched\n * @returns {object} - parsed [type] color object\n */\nconst parseColorObject = (colorObject) => {\n  const keys = Object.keys(colorObject).map(c => c.toLowerCase());\n  let type;\n  if (equalArrays(keys, 'rgb'.split(''))) type = 'rgb';\n  else if (equalArrays(keys, 'rgba'.split(''))) type = 'rgba';\n  else if (equalArrays(keys, 'hsl'.split(''))) type = 'hsl';\n  else if (equalArrays(keys, 'hsla'.split(''))) type = 'hsla';\n  else throw new Error('Unsupported color type');\n  return { color: colorObject, format: 'json', type };\n};\n\n\n/**\n * Parses color (reducer)\n * \n * Switches on color type and calls corresponding type\n * parser.\n * @param {string|object} color - color to convert\n * @throws color type not string or object\n * @returns {object} - referred parsed color\n * \n * @example Color string call stack\n * parseColor(`#fff`) =>\n *  parseColorString(`#fff`) =>\n *    parseHexColorString(`#fff`) \n * \n * @example Color object call stack\n * parseColor({ r: 255, g: 255, b: 255 }) =>\n *  parseColorObject({ r: 255, g: 255, b: 255 })\n */\nconst parseColor = (color) => {\n  let parsedColor;\n  switch (typeof color) {\n    case 'string':\n      parsedColor = parseColorString(color);\n      break;\n    case 'object':\n      parsedColor = parseColorObject(color);\n      break;\n    default:\n      throw new Error('Unsupported color format');\n  }\n  return parsedColor;\n};\n\n\nexport default parseColor;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/parse-color.js","/**\n * HSL => HSL\n * \n * Deconstructs the HSL color object and formats the hsl\n * values to a HSL CSS string.\n * @param {object} hslColor\n * @returns {string} - HSL CSS string\n */\nexport const toHsl = (hslColor) => {\n  const { h, s, l } = hslColor;\n  return `hsl(${h},${s * 100}%,${l * 100}%)`;\n};\n\n\n/**\n * HSL => HSLA\n * \n * Returns result of previously defined toRgb function, changes\n * the prefix to `hsla` and adds a default alpha channel of 1.\n * @param {object} hslColor\n * @returns {string} - HSLA CSS string\n */\nexport const toHsla = hslaColor => `hsla${toHsl(hslaColor).slice(3, -1)},1)`;\n\n\n/**\n * HSL => RGB\n * \n * Deconstructs the HSL color object, calculates the chroma by\n * getting the absolute difference of the luminance (x2) - 1 *\n * saturation. The hue is divided by 60. A temporary component\n * (sec) is calculated by multiplying the chroma (percise) by the \n * absolute difference of 1 and the hue / 60 - 1. Now we can round\n * the hue divided. Switch on its value to assign the r,g,b percents.\n * The percents are then multiplied by 255 and rounded, to be formatted\n * to a RGB CSS string.\n * @todo make less ~ lossy\n * @param {object} hslColor\n * @returns {string} - RGB CSS string\n */\nexport const toRgb = (hslColor) => {\n  const { h, s, l } = hslColor;\n  let red, green, blue;\n  const chroma = (1 - Math.abs((2 * l) - 1)) * s;\n  let hueDiv = h / 60;\n  const sec = chroma * (1 - Math.abs((hueDiv % 2) - 1));\n  hueDiv = Math.round(hueDiv);\n  switch (hueDiv) {\n    case 0:\n      red = chroma; green = sec; blue = 0;\n      break;\n    case 1:\n      red = sec; green = chroma; blue = 0;\n      break;\n    case 2:\n      red = 0; green = chroma; blue = sec;\n      break;\n    case 3:\n      red = 0; green = sec; blue = chroma;\n      break;\n    case 4:\n      red = sec; green = 0; blue = chroma;\n      break;\n    case 5:\n      red = chroma; green = 0; blue = sec;\n      break;\n  }\n  return `rgb(${[red, green, blue].map((c) => {\n    const adjColor = c + (l - (chroma / 2));\n    return Math.round(adjColor * 255);\n  }).join(',')})`;\n};\n\n\n/**\n * HSL => Hex\n * \n * For an indepth description, look at the HSL => RGB hex; the\n * only difference is the output. The rgb values are formatted\n * to a Hex CSS string.\n * @todo make less ~ lossy\n * @param {object} hslColor\n * @returns {string} - Hex CSS string\n */\nexport const toHex = (hslColor) => {\n  const { h, s, l } = hslColor;\n  let red, green, blue;\n  const chroma = (1 - Math.abs((2 * l) - 1)) * s;\n  let hueDiv = h / 60;\n  const sec = chroma * (1 - Math.abs((hueDiv % 2) - 1));\n  hueDiv = Math.round(hueDiv);\n  switch (hueDiv) {\n    case 0:\n      red = chroma; green = sec; blue = 0;\n      break;\n    case 1:\n      red = sec; green = chroma; blue = 0;\n      break;\n    case 2:\n      red = 0; green = chroma; blue = sec;\n      break;\n    case 3:\n      red = 0; green = sec; blue = chroma;\n      break;\n    case 4:\n      red = sec; green = 0; blue = chroma;\n      break;\n    case 5:\n      red = chroma; green = 0; blue = sec;\n      break;\n  }\n  return `#${[red, green, blue].map((c) => {\n    const adjColor = c + (l - (chroma / 2));\n    const hex = Math.round(adjColor * 255).toString(16);\n    return hex.length === 2 ? hex : `0${hex}`;\n  }).join('')}`;\n};\n\n\n/**\n * HSL => RGBA\n * \n * Returns result of previously defined toRgb function, changes\n * the prefix to `rgba`, and adds a default alpha channel of 1.\n * @param {object} hslColor\n * @returns {string} - RGBA CSS string\n */\nexport const toRgba = hslColor => `rgba${toRgb(hslColor).slice(3, -1)},1)`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/conversions/hsl.js","/**\n * RGB => HSL\n * \n * Deconstructs the RGB color object and formats the values\n * to percents. The chroma value is calculated by subtracting the \n * min and max values. If the chroma/delta is 0, the hue and \n * saturation are 0 and the color is greyscale (exit early). Otherwise,\n * switch on the max value to calculate the hue. Finally, the values\n * are mapped to a HSL CSS string.\n * @param {object} rgbColor\n * @returns {string} - HSL CSS string\n */\nexport const toHsl = (rgbColor) => {\n  const red = rgbColor.r / 255;\n  const green = rgbColor.g / 255;\n  const blue = rgbColor.b / 255;\n  const max = Math.max(red, green, blue);\n  const min = Math.min(red, green, blue);\n  const chroma = max - min;\n  let luminance, saturation, hue;\n  // Calculate luminance\n  luminance = (min + max) / 2;\n  // No further calculations needed; Achromatic\n  if (chroma === 0) return `hsl(0,0%,${parseInt(luminance * 100, 10)}%)`;\n  // Calculate saturation\n  saturation = luminance > 0.5 ?\n    chroma / (2.0 - max - min) :\n    chroma / (max + min);\n  // Calculate hue\n  switch (max) {\n    case red:\n      hue = ((green - blue) / chroma + (green < blue ? 6 : 0)) * 60; break;\n    case green:\n      hue = ((blue - red) / chroma + 2) * 60; break;\n    case blue:\n      hue = ((red - green) / chroma + 4) * 60; break;\n  }\n  hue = Math.round(hue);\n  saturation = Math.round(saturation * 100);\n  luminance = Math.round(luminance * 100);\n  return `hsl(${hue},${saturation}%,${luminance}%)`;\n};\n\n\n/**\n * RGB => HSLA\n * \n * Returns result of previously declared toHsl function, changes\n * the prefix to `hsla` and appends a default alpha channel of 1.\n * @param {object} rgbColor\n * @returns {string} - HSLA CSS string\n */\nexport const toHsla = rgbColor => `hsla${toHsl(rgbColor).slice(3, -1)},1)`;\n\n\n/**\n * RGB => Hex\n * \n * Deconstructs RGB color object and maps its values to a Hex\n * CSS string format.\n * @param {object} rgbColor\n * @returns {string} - Hex CSS string\n */\nexport const toHex = (rgbColor) => {\n  const { r, g, b } = rgbColor;\n  return `#${[r, g, b].map((n) => {\n    const num = n.toString(16);\n    return num.length === 2 ? num : `0${num}`;\n  }).join('')}`;\n};\n\n\n/**\n * RGB => RGB\n * \n * Deconstructs RGB color object and maps its values to a RGB\n * CSS string format.\n * @param {object} rgbColor\n * @return {string} - RGB CSS string\n */\nexport const toRgb = (rgbColor) => {\n  const { r, g, b } = rgbColor;\n  return `rgb(${r},${g},${b})`;\n};\n\n\n/**\n * RGB => RGBA\n * \n * Returns result of previously declared toRgb function, changes\n * the prefix to `rgba` and appends a default alpha channel of 1.\n * @param {object} rgbColor\n * @return {string} - RGBA CSS string\n */\nexport const toRgba = rgbColor => `rgba${toRgb(rgbColor).slice(3, -1)},1)`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/conversions/rgb.js","/* eslint-disable */\nexport {\n  toHsl,\n  toHsla,\n  toHex,\n  toRgb,\n  toRgba,\n} from './conversions';\n\nexport {\n  darken,\n  lighten,\n  saturate,\n  desaturate,\n  opacify,\n  transparentize,\n} from './manipulations';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\n * Determines if two arrays are equal\n * \n * @param {array} arr1 \n * @param {array} arr2\n */\nconst equalsArray = (arr1, arr2) => {\n  if (arr1 === arr2) return true;\n  if (arr1 == null || arr2 == null) return false;\n  if (arr1.length !== arr2.length) return false;\n  // sort arrays\n  const a = arr1.sort();\n  const b = arr2.sort();\n  for (let i = 0; i < arr1.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n};\n\n\nexport default equalsArray;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/equal-arrays.js","import { parseColor } from '../utils';\nimport * as convert from '../conversions';\n\n\n/**\n * Convenience toHsla method\n * \n * Parses a given color, determines it's type, converts\n * it to HSLA if it is not HSLA already. Finally It returns\n * the color and a handy closure that returns the color back\n * to it's original type.\n */\nconst convenienceToHsla = ($color) => {\n  const parsed = parseColor($color);\n  const subScript = `to${parsed.type[0].toUpperCase()}${parsed.type.slice(1)}`;\n  const color = subScript.includes('Hsla') ? parsed.color :\n    convert.toJSON(convert.toHsla($color));\n  const toOriginalColorType = newColor => convert[subScript](newColor);\n  return { color, toOriginalColorType };\n};\n\n\nexport default convenienceToHsla;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/convenience-to-hsla.js","import * as hsl from './hsl';\n\n\n/**\n * HSL => HSL\n * \n * Returns the result of hsl.toHsl, as the alpha channel is \n * irrelavent.\n * @param {object} hslColor\n * @returns {string} - HSL CSS string\n */\nexport const toHsl = hslaColor => hsl.toHsl(hslaColor);\n\n\n/**\n * HSL => HSLA\n * \n * Returns the result of hsl.toHsl, changes prefix to hsla and\n * appends the hslaColor's alpha channel.\n * @param {object} hslColor\n * @returns {string} - HSLA CSS string\n */\nexport const toHsla = (hslaColor) => {\n  const { a } = hslaColor;\n  return `hsla${hsl.toHsl(hslaColor).slice(3, -1)},${a})`;\n};\n\n\n/**\n * HSL => Hex\n * \n * Returns the result of hsl.toHex, as the alpha channel is \n * irrelavent.\n * @param {object} hslColor\n * @returns {string} - Hex CSS string\n */\nexport const toHex = hslaColor => hsl.toHex(hslaColor);\n\n\n/**\n * HSL => RGB\n * \n * Returns the result of hsl.toRgb, as the alpha channel is \n * irrelavent.\n * @param {object} hslaColor\n * @returns {string} - RGB CSS string\n */\nexport const toRgb = hslaColor => hsl.toRgb(hslaColor);\n\n\n/**\n * HSL => RGBA\n * \n * Returns the result of hsl.toRgb, changes prefix to rgba and\n * appends the hslaColor's alpha channel.\n * @param {object} hslColor\n * @returns {string} - RGBA CSS string\n */\nexport const toRgba = (hslaColor) => {\n  const { a } = hslaColor;\n  return `rgba${hsl.toRgb(hslaColor).slice(3, -1)},${a})`;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/conversions/hsla.js","import * as rgb from './rgb';\n\n/**\n * RGBA => HSL\n * \n * Calls rgb.toHsl method as the alpha channel is irrelavent.\n * @param {object} rgbaColor\n * @returns {string} - HSL CSS string\n */\nexport const toHsl = rgbaColor => rgb.toHsl(rgbaColor);\n\n\n/**\n * RGBA => HSLA\n * \n * Returns the result of rgb.toHsl, changes prefix to hsla and \n * appends the rgbaColor's alpha channel.\n * @param {object} rgbaColor\n * @returns {string} - HSLA CSS string\n */\nexport const toHsla = (rgbaColor) => {\n  const { a } = rgbaColor;\n  return `hsla${rgb.toHsl(rgbaColor).slice(3, -1)},${a})`;\n};\n\n\n/**\n * RGBA => Hex\n * \n * Calls rgb.toHex method as the alpha channel is irrelavent.\n * @param {object} rgbaColor\n * @returns {string} - Hex CSS string\n */\nexport const toHex = rgbaColor => rgb.toHex(rgbaColor);\n\n\n/**\n * RGBA -> RGB\n * \n * Calls rgb.toRgb method as the alpha channel is irrelavent.\n * @param {object} rgbaColor\n * @returns {string} - RGB CSS string\n */\nexport const toRgb = rgbaColor => rgb.toRgb(rgbaColor);\n\n\n/**\n *  RGBA => RGBA\n * \n * Returns the result of rgb.toHsl, changes prefix to rgba and\n * appends the rgbaColor's alpha channel.\n * @param {object} rgbaColor\n * @returns {string} - RGBA CSS string\n */\nexport const toRgba = (rgbaColor) => {\n  const { a } = rgbaColor;\n  return `rgba${rgb.toRgba(rgbaColor).slice(3, -1)},${a})`;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/conversions/rgba.js","export { lighten, darken } from './luminance';\nexport { saturate, desaturate } from './saturation';\nexport { opacify, transparentize } from './opacity';\n\n\n\n// WEBPACK FOOTER //\n// ./src/manipulations/index.js","import { convenienceToHsla } from '../utils';\n\n\n/**\n * Alters color's luminance value\n * \n * Parses color, converts it to HSLA (for easy manipulation),\n * reduces/increases the luminance value according to the factor\n * if possible. Finally, it is converted to it's original format \n * and returned via a convenience closure.\n * @param {string|object} $color \n * @param {number} factor\n * @returns {string} - [type] CSS string\n */\nconst alterLuminance = ($color, factor) => {\n  if (factor > 1 || factor < -1) throw new Error('Invalid factor');\n  const { color, toOriginalColorType } = convenienceToHsla($color);\n  let lum = color.l;\n  const adjLum = lum + factor;\n  // keep luminance bound to range of [0 - 1]\n  if (adjLum <= 1 && adjLum >= 0) lum = adjLum;\n  else { console.warn('lum out of bounds'); lum = adjLum > 0.5 ? 1 : 0; }\n  return toOriginalColorType({ ...color, l: lum });\n};\n\n\n/**\n * Lightens color\n * \n * Calls alterLuminance function with a positive factor, making\n * the luminance value increase. \n * @param {string|object} color\n * @param {number} factor \n */\nexport const lighten = (color, factor = 0.1) => alterLuminance(color, factor);\n\n\n/**\n * Darkens color\n * \n * Calls alterLuminance function with a negitive factor, making\n * the luminance value decrease.\n * @param {string|object} color\n * @param {number} factor \n */\nexport const darken = (color, factor = 0.1) => alterLuminance(color, -factor);\n\n\n\n// WEBPACK FOOTER //\n// ./src/manipulations/luminance.js","import { convenienceToHsla } from '../utils';\n\n\n/**\n * Alters color's saturation value\n * \n * Parses color, converts it to HSLA (for easy manipulation),\n * reduces/increases the saturation value according to the factor\n * if possible. Finally, it is converted to it's original format \n * and returned via a convenience closure.\n * @param {string|object} $color \n * @param {number} factor\n * @returns {string} - [type] CSS string\n */\nconst alterSaturation = ($color, factor) => {\n  if (factor > 1 || factor < -1) throw new Error('Invalid factor');\n  const { color, toOriginalColorType } = convenienceToHsla($color);\n  let sat = color.s;\n  const adjSat = sat + factor;\n  // keep saturation bound to range of [0 - 1]\n  if (adjSat <= 1 && adjSat >= 0) sat = adjSat;\n  else { console.warn('sat out of bounds'); sat = adjSat > 0.5 ? 1 : 0; }\n  return toOriginalColorType({ ...color, s: sat });\n};\n\n\n/**\n * Saturates color\n * \n * Calls alterSaturation function with a positive factor, making\n * the saturation value increase by the factor.\n * @param {string|object} color\n * @param {number} factor\n * @returns {string} - [type] CSS string\n */\nexport const saturate = (color, factor = 0.1) => alterSaturation(color, factor);\n\n\n/**\n * Desaturates color\n * \n * Calls alterSaturation function with a negative factor, making\n * the saturation value decrease by the factor.\n * @param {string|object} color \n * @param {number} factor \n * @returns {string} - [type] CSS string\n */\nexport const desaturate = (color, factor = 0.1) => alterSaturation(color, -factor);\n\n\n\n// WEBPACK FOOTER //\n// ./src/manipulations/saturation.js","import { convenienceToHsla } from '../utils';\n\n\n/**\n * Alters color's alpha chanel\n * \n * Parses color, converts it to HSLA (for easy manipulation),\n * reduces/increases the alpha channel according to the factor\n * if possible. Finally, it is converted to it's original format \n * and returned via a convenience closure.\n * @param {string|object} $color \n * @param {number} factor\n * @returns {string} - [type] CSS string\n */\nconst alterOpacity = ($color, factor) => {\n  if (factor > 1 || factor < -1) throw new Error('Invalid factor');\n  const { color, toOriginalColorType } = convenienceToHsla($color);\n  let alpha = color.a;\n  const adjAlpha = alpha + factor;\n  // keep alpha channel bound to range of [0 - 1]\n  if (adjAlpha <= 1 && adjAlpha >= 0) alpha = adjAlpha;\n  else { console.warn('alpha out of bounds'); alpha = adjAlpha > 0.5 ? 1 : 0; }\n  return toOriginalColorType({ ...color, a: alpha });\n};\n\n\n/**\n * Opacifies color\n * \n * Calls alterOpacity function with a positive factor, making\n * the alpha channel increase by the factor.\n * @param {*}  \n * @param {*} factor \n */\nexport const opacify = (color, factor = 0.1) => alterOpacity(color, factor);\n\n\n/**\n * Transparentizes color\n * \n * Calls alterOpacity function with a negative factor, making\n * the alpha channel decrease by the factor.\n * @param {*} color \n * @param {*} factor \n */\nexport const transparentize = (color, factor = 0.1) => alterOpacity(color, -factor);\n\n\n\n// WEBPACK FOOTER //\n// ./src/manipulations/opacity.js"],"sourceRoot":""}